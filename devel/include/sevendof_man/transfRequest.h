// Generated by gencpp from file sevendof_man/transfRequest.msg
// DO NOT EDIT!


#ifndef SEVENDOF_MAN_MESSAGE_TRANSFREQUEST_H
#define SEVENDOF_MAN_MESSAGE_TRANSFREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace sevendof_man
{
template <class ContainerAllocator>
struct transfRequest_
{
  typedef transfRequest_<ContainerAllocator> Type;

  transfRequest_()
    : frame_a()
    , frame_b()  {
    }
  transfRequest_(const ContainerAllocator& _alloc)
    : frame_a(_alloc)
    , frame_b(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _frame_a_type;
  _frame_a_type frame_a;

   typedef  ::std_msgs::String_<ContainerAllocator>  _frame_b_type;
  _frame_b_type frame_b;





  typedef boost::shared_ptr< ::sevendof_man::transfRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sevendof_man::transfRequest_<ContainerAllocator> const> ConstPtr;

}; // struct transfRequest_

typedef ::sevendof_man::transfRequest_<std::allocator<void> > transfRequest;

typedef boost::shared_ptr< ::sevendof_man::transfRequest > transfRequestPtr;
typedef boost::shared_ptr< ::sevendof_man::transfRequest const> transfRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sevendof_man::transfRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sevendof_man::transfRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sevendof_man::transfRequest_<ContainerAllocator1> & lhs, const ::sevendof_man::transfRequest_<ContainerAllocator2> & rhs)
{
  return lhs.frame_a == rhs.frame_a &&
    lhs.frame_b == rhs.frame_b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sevendof_man::transfRequest_<ContainerAllocator1> & lhs, const ::sevendof_man::transfRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sevendof_man

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sevendof_man::transfRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sevendof_man::transfRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sevendof_man::transfRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sevendof_man::transfRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sevendof_man::transfRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sevendof_man::transfRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sevendof_man::transfRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a792ec3034806d85024f1ea9d2e4f7bd";
  }

  static const char* value(const ::sevendof_man::transfRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa792ec3034806d85ULL;
  static const uint64_t static_value2 = 0x024f1ea9d2e4f7bdULL;
};

template<class ContainerAllocator>
struct DataType< ::sevendof_man::transfRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sevendof_man/transfRequest";
  }

  static const char* value(const ::sevendof_man::transfRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sevendof_man::transfRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String frame_a\n"
"std_msgs/String frame_b\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::sevendof_man::transfRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sevendof_man::transfRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_a);
      stream.next(m.frame_b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct transfRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sevendof_man::transfRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sevendof_man::transfRequest_<ContainerAllocator>& v)
  {
    s << indent << "frame_a: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.frame_a);
    s << indent << "frame_b: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.frame_b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEVENDOF_MAN_MESSAGE_TRANSFREQUEST_H
